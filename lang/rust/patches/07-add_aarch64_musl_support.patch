--- /dev/null
+++ b/compiler/rustc_target/src/spec/aarch64_openwrt_linux_musl.rs
@@ -0,0 +1,18 @@
+use crate::spec::{Target, TargetOptions};
+
+pub fn target() -> Target {
+    let mut base = super::linux_musl_base::opts();
+    base.max_atomic_width = Some(128);
+
+    Target {
+        llvm_target: "aarch64-unknown-linux-musl".to_string(),
+        pointer_width: 64,
+        data_layout: "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128".to_string(),
+        arch: "aarch64".to_string(),
+        options: TargetOptions {
+            unsupported_abis: super::arm_base::unsupported_abis(),
+            mcount: "\u{1}_mcount".to_string(),
+            ..base
+        },
+    }
+}
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -669,6 +669,7 @@ supported_targets! {
     ("arm-openwrt-linux-muslgnueabi", arm_openwrt_linux_muslgnueabi),
     ("powerpc-openwrt-linux-musl", powerpc_openwrt_linux_musl),
     ("mipsel-openwrt-linux-musl", mipsel_openwrt_linux_musl),
+    ("aarch64-openwrt-linux-musl", aarch64_openwrt_linux_musl),
 }

 /// Everything `rustc` knows about how to compile for a specific target.
